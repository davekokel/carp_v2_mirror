schema,view_name,comment,definition
public,v_cit_rollup,""," SELECT ci.clutch_instance_code,
    count(*)::integer AS treatments_count,
    string_agg((COALESCE(t.material_type, ''::text) || ':'::text) || COALESCE(t.material_code, ''::text), '; '::text ORDER BY t.created_at DESC NULLS LAST) AS treatments_pretty
   FROM clutch_instance_treatments t
     JOIN clutch_instances ci ON ci.id = t.clutch_instance_id
  GROUP BY ci.clutch_instance_code;"
public,v_clutch_annotations_summary,""," WITH link AS (
         SELECT cl.id AS clutch_id,
            ci.id AS selection_id,
            ci.cross_instance_id,
            ci.created_at,
            ci.annotated_at,
            ci.annotated_by,
            COALESCE(ci.red_selected, false) AS red_selected,
            COALESCE(ci.green_selected, false) AS green_selected,
            NULLIF(btrim(ci.red_intensity), ''::text) AS red_intensity,
            NULLIF(btrim(ci.green_intensity), ''::text) AS green_intensity,
            NULLIF(btrim(ci.notes), ''::text) AS notes,
            NULLIF(btrim(ci.label), ''::text) AS label
           FROM clutches cl
             JOIN cross_instances x ON x.id = cl.cross_instance_id
             JOIN clutch_instances ci ON ci.cross_instance_id = x.id
        ), latest AS (
         SELECT DISTINCT ON (link.clutch_id) link.clutch_id,
            link.selection_id,
            link.cross_instance_id,
            link.created_at,
            link.annotated_at,
            link.annotated_by,
            link.red_selected,
            link.green_selected,
            link.red_intensity,
            link.green_intensity,
            link.notes,
            link.label
           FROM link
          ORDER BY link.clutch_id, (COALESCE(link.annotated_at, link.created_at)) DESC, link.created_at DESC, link.selection_id DESC
        ), annotators AS (
         SELECT s.clutch_id,
            string_agg(s.annotated_by_txt, ', '::text ORDER BY s.annotated_by_txt) AS annotators
           FROM ( SELECT DISTINCT link.clutch_id,
                    COALESCE(link.annotated_by, ''::text) AS annotated_by_txt
                   FROM link
                  WHERE link.annotated_by IS NOT NULL AND btrim(link.annotated_by) <> ''::text) s
          GROUP BY s.clutch_id
        ), agg AS (
         SELECT l.clutch_id,
            count(*)::integer AS annotations_count,
            max(COALESCE(l.annotated_at, l.created_at)) AS last_annotated_at,
            sum(
                CASE
                    WHEN l.red_selected THEN 1
                    ELSE 0
                END)::integer AS red_selected_count,
            sum(
                CASE
                    WHEN l.green_selected THEN 1
                    ELSE 0
                END)::integer AS green_selected_count
           FROM link l
          GROUP BY l.clutch_id
        ), rollup AS (
         SELECT lt.clutch_id,
                CASE
                    WHEN lt.red_selected THEN 'red:'::text || COALESCE(lt.red_intensity, 'selected'::text)
                    ELSE ''::text
                END AS red_part,
                CASE
                    WHEN lt.green_selected THEN 'green:'::text || COALESCE(lt.green_intensity, 'selected'::text)
                    ELSE ''::text
                END AS green_part,
                CASE
                    WHEN lt.notes IS NOT NULL THEN 'note:'::text || ""left""(lt.notes, 120)
                    ELSE ''::text
                END AS note_part
           FROM latest lt
        ), rollup_fmt AS (
         SELECT r.clutch_id,
                CASE
                    WHEN NULLIF(r.red_part, ''::text) IS NOT NULL OR NULLIF(r.green_part, ''::text) IS NOT NULL THEN array_to_string(ARRAY[NULLIF(r.red_part, ''::text), NULLIF(r.green_part, ''::text)], ' ; '::text)
                    ELSE ''::text
                END ||
                CASE
                    WHEN NULLIF(r.note_part, ''::text) IS NOT NULL THEN
                    CASE
                        WHEN NULLIF(r.red_part, ''::text) IS NOT NULL OR NULLIF(r.green_part, ''::text) IS NOT NULL THEN ', '::text || r.note_part
                        ELSE r.note_part
                    END
                    ELSE ''::text
                END AS annotation_rollup
           FROM rollup r
        )
 SELECT a.clutch_id,
    COALESCE(a.annotations_count, 0) AS annotations_count,
    a.last_annotated_at,
    COALESCE(n.annotators, ''::text) AS annotators,
    COALESCE(a.red_selected_count, 0) AS red_selected_count,
    COALESCE(a.green_selected_count, 0) AS green_selected_count,
    COALESCE(rf.annotation_rollup, ''::text) AS annotation_rollup
   FROM agg a
     LEFT JOIN annotators n ON n.clutch_id = a.clutch_id
     LEFT JOIN rollup_fmt rf ON rf.clutch_id = a.clutch_id;"
public,v_clutch_treatments_summary,""," WITH base AS (
         SELECT clutch_plan_treatments.clutch_id,
            clutch_plan_treatments.material_type,
            clutch_plan_treatments.material_code,
            COALESCE(NULLIF(btrim(clutch_plan_treatments.material_name), ''::text), clutch_plan_treatments.material_code) AS material_name,
            jsonb_build_object('type', clutch_plan_treatments.material_type, 'code', clutch_plan_treatments.material_code, 'name', COALESCE(NULLIF(btrim(clutch_plan_treatments.material_name), ''::text), clutch_plan_treatments.material_code)) AS obj
           FROM clutch_plan_treatments
        )
 SELECT clutch_id,
    count(*)::integer AS treatments_count,
    string_agg(DISTINCT material_code, ' ; '::text ORDER BY material_code) AS treatments_pretty,
    jsonb_agg(DISTINCT obj ORDER BY obj) AS treatments_json
   FROM base
  GROUP BY clutch_id;"
public,v_fish_label_fields,""," SELECT fish_code,
    nickname,
    name,
    NULL::text AS base_code,
    NULL::text AS tg_nick,
    line_building_stage AS stage,
    date_birth AS dob,
    NULLIF(array_to_string(ARRAY( SELECT (fa2.transgene_base_code || '^'::text) || fa2.allele_number::text
           FROM fish_transgene_alleles fa2
          WHERE fa2.fish_id = f.id
          ORDER BY fa2.transgene_base_code, fa2.allele_number), '; '::text), ''::text) AS genotype,
    genetic_background
   FROM fish f;"
public,v_fish_live_counts,"Live tank membership per fish_code, filtered to active/new_tank & relevant tank types."," SELECT f.fish_code,
    count(*)::integer AS n_live
   FROM fish f
     JOIN fish_tank_memberships m ON f.id = m.fish_id AND m.left_at IS NULL
     JOIN containers c ON m.container_id = c.id
  WHERE (c.status = ANY (ARRAY['active'::text, 'new_tank'::text])) AND (c.container_type = ANY (ARRAY['inventory_tank'::text, 'holding_tank'::text, 'nursery_tank'::text]))
  GROUP BY f.fish_code;"
public,v_fish_standard_clean_v2,""," SELECT f.fish_code,
    f.name,
    f.nickname,
    f.genetic_background,
    f.line_building_stage,
    f.date_birth AS birth_date,
    f.created_at AS created_time,
    f.created_by,
    fta.transgene_base_code,
    fta.allele_number,
    r.allele_nickname,
    'gu'::text || fta.allele_number::text AS allele_name,
    (('Tg('::text || fta.transgene_base_code) || ')'::text) || COALESCE(r.allele_nickname, ''::text) AS transgene_pretty_nickname,
    (('Tg('::text || fta.transgene_base_code) || ')'::text) || ('gu'::text || fta.allele_number::text) AS transgene_pretty_name,
    ( SELECT string_agg((('Tg('::text || fta2.transgene_base_code) || ')'::text) || ('gu'::text || fta2.allele_number::text), '; '::text ORDER BY fta2.transgene_base_code, fta2.allele_number) AS string_agg
           FROM fish_transgene_alleles fta2
          WHERE fta2.fish_id = f.id) AS genotype
   FROM fish f
     LEFT JOIN fish_transgene_alleles fta ON fta.fish_id = f.id
     LEFT JOIN transgene_allele_registry r ON r.transgene_base_code = fta.transgene_base_code AND r.allele_number = fta.allele_number;"
public,v_plasmids,""," SELECT id,
    code,
    name,
    nickname,
    fluors,
    resistance,
    supports_invitro_rna,
    created_by,
    notes,
    created_at,
    rna_id,
    rna_code,
    rna_name,
    source_plasmid_id
   FROM vw_plasmids_overview;"
public,v_rna_plasmids,""," WITH p AS (
         SELECT p_1.id AS plasmid_id,
            'RNA-'::text || p_1.code AS code,
            p_1.name,
            p_1.nickname,
            p_1.created_at,
            p_1.created_by
           FROM plasmids p_1
          WHERE p_1.supports_invitro_rna = true
        ), pr AS (
         SELECT rr.rna_code AS code,
            NULL::uuid AS plasmid_id,
            rr.rna_nickname AS registry_nickname,
            rr.created_at AS registry_created_at,
            rr.created_by AS registry_created_by
           FROM rna_registry rr
        )
 SELECT COALESCE(p.plasmid_id, pr.plasmid_id) AS plasmid_id,
    COALESCE(p.code, pr.code) AS code,
    COALESCE(p.name, pr.code) AS name,
    COALESCE(pr.registry_nickname, p.nickname, ''::text) AS nickname,
    COALESCE(p.created_at, pr.registry_created_at) AS created_at,
    COALESCE(p.created_by, pr.registry_created_by) AS created_by,
        CASE
            WHEN p.plasmid_id IS NOT NULL THEN 'plasmids'::text
            ELSE 'rna_registry'::text
        END AS source
   FROM p
     FULL JOIN pr ON pr.code = p.code;"
public,v_tank_pairs,""," SELECT tp.id,
    tp.tank_pair_code,
    tp.concept_id,
    tp.status,
    tp.created_by,
    tp.created_at,
    fp.id AS fish_pair_id,
    mf.fish_code AS mom_fish_code,
    df.fish_code AS dad_fish_code,
    tp.mother_tank_id,
    mt.tank_code AS mom_tank_code,
    tp.father_tank_id,
    dt.tank_code AS dad_tank_code,
    COALESCE(cp.clutch_code, cp.id::text) AS clutch_code
   FROM tank_pairs tp
     JOIN fish_pairs fp ON tp.fish_pair_id = fp.id
     JOIN fish mf ON fp.mom_fish_id = mf.id
     JOIN fish df ON fp.dad_fish_id = df.id
     LEFT JOIN clutch_plans cp ON tp.concept_id = cp.id
     JOIN containers mt ON tp.mother_tank_id = mt.id
     JOIN containers dt ON tp.father_tank_id = dt.id;"
public,v_tanks,""," WITH mem AS (
         SELECT m.container_id AS tank_id,
            f.fish_code
           FROM fish_tank_memberships m
             JOIN fish f ON f.id = m.fish_id
        ), asg AS (
         SELECT a.tank_id,
            f.fish_code
           FROM fish_tank_assignments a
             JOIN fish f ON f.id = a.fish_id
          WHERE a.end_at IS NULL
        )
 SELECT t.tank_id,
    COALESCE(t.rack, ''::text) ||
        CASE
            WHEN t.""position"" IS NOT NULL THEN '-'::text || t.""position""
            ELSE ''::text
        END AS label,
    t.tank_code,
    s.status::text AS status,
    s.changed_at AS tank_updated_at,
    t.created_at AS tank_created_at,
    COALESCE(mem.fish_code, asg.fish_code) AS fish_code
   FROM tanks t
     LEFT JOIN v_tanks_current_status s ON s.tank_id = t.tank_id
     LEFT JOIN mem ON mem.tank_id = t.tank_id
     LEFT JOIN asg ON asg.tank_id = t.tank_id;"
public,v_tanks_current_status,""," SELECT t.tank_id,
    s.status,
    s.reason,
    s.changed_at
   FROM tanks t
     JOIN tank_status_history s ON s.tank_id = t.tank_id
  WHERE s.changed_at = (( SELECT max(s2.changed_at) AS max
           FROM tank_status_history s2
          WHERE s2.tank_id = s.tank_id));"
public,vw_fish_overview_with_label,""," WITH base AS (
         SELECT f.fish_code,
            f.name,
            f.nickname,
            f.line_building_stage,
            f.date_birth,
            f.genetic_background,
            f.created_by,
            f.created_at
           FROM fish f
        ), allele AS (
         SELECT DISTINCT ON (f2.fish_code) f2.fish_code,
            l.transgene_base_code,
            l.allele_number,
            ta.allele_nickname
           FROM fish_transgene_alleles l
             JOIN fish f2 ON f2.id = l.fish_id
             LEFT JOIN transgene_alleles ta ON ta.transgene_base_code = l.transgene_base_code AND ta.allele_number = l.allele_number
          ORDER BY f2.fish_code, l.transgene_base_code, l.allele_number
        ), batch AS (
         SELECT DISTINCT ON (f3.fish_code) f3.fish_code,
            m.seed_batch_id
           FROM fish_seed_batches_map m
             JOIN fish f3 ON f3.id = m.fish_id
          ORDER BY f3.fish_code, m.logged_at DESC NULLS LAST, m.created_at DESC NULLS LAST
        )
 SELECT b.fish_code,
    b.name,
    b.nickname,
    b.line_building_stage,
    b.date_birth,
    b.genetic_background,
    b.created_by,
    b.created_at,
    a.transgene_base_code AS transgene_base_code_filled,
    a.allele_number::text AS allele_code_filled,
    a.allele_nickname AS allele_name_filled,
    batch.seed_batch_id,
    batch.seed_batch_id AS batch_label,
    COALESCE(b.nickname, ''::text) AS nickname_print,
    COALESCE(b.genetic_background, ''::text) AS genetic_background_print,
    COALESCE(b.line_building_stage, ''::text) AS line_building_stage_print,
    COALESCE(to_char(b.date_birth::timestamp with time zone, 'YYYY-MM-DD'::text), ''::text) AS date_birth_print,
        CASE
            WHEN a.transgene_base_code IS NULL THEN ''::text
            WHEN a.allele_number IS NOT NULL THEN (a.transgene_base_code || '-'::text) || a.allele_number::text
            WHEN a.allele_nickname IS NOT NULL THEN (a.transgene_base_code || ' '::text) || a.allele_nickname
            ELSE a.transgene_base_code
        END AS genotype_print,
        CASE
            WHEN b.date_birth IS NOT NULL THEN CURRENT_DATE - b.date_birth
            ELSE NULL::integer
        END AS age_days,
        CASE
            WHEN b.date_birth IS NOT NULL THEN (CURRENT_DATE - b.date_birth) / 7
            ELSE NULL::integer
        END AS age_weeks,
    COALESCE(b.created_by, ''::text) AS created_by_enriched,
    NULL::text AS plasmid_injections_text,
    NULL::text AS rna_injections_text
   FROM base b
     LEFT JOIN allele a USING (fish_code)
     LEFT JOIN batch USING (fish_code)
  ORDER BY b.fish_code;"
public,vw_fish_standard,""," WITH base AS (
         SELECT f.id,
            f.fish_code,
            COALESCE(f.name, ''::text) AS name,
            COALESCE(f.nickname, ''::text) AS nickname,
            f.date_birth,
            f.created_at,
            COALESCE(f.created_by, ''::text) AS created_by_raw
           FROM fish f
        ), label AS (
         SELECT v.fish_code,
            v.genotype_print AS genotype,
            COALESCE(v.genetic_background_print, v.genetic_background) AS genetic_background,
            COALESCE(v.line_building_stage, v.line_building_stage_print) AS stage,
            v.batch_label,
            v.seed_batch_id,
            v.transgene_base_code_filled AS transgene_base_code,
            v.allele_code_filled AS allele_code,
            v.created_by_enriched,
            NULLIF(v.plasmid_injections_text, ''::text) AS plasmid_injections_text,
            NULLIF(v.rna_injections_text, ''::text) AS rna_injections_text
           FROM vw_fish_overview_with_label v
        ), tank_counts AS (
         SELECT m.fish_id,
            count(*)::integer AS n_living_tanks
           FROM fish_tank_memberships m
             JOIN containers c ON c.id = m.container_id
          WHERE m.left_at IS NULL AND c.container_type = 'inventory_tank'::text AND c.deactivated_at IS NULL AND (COALESCE(c.status, ''::text) = ANY (ARRAY['active'::text, 'planned'::text]))
          GROUP BY m.fish_id
        ), roll AS (
         SELECT l1.fish_code,
            TRIM(BOTH '; '::text FROM concat_ws('; '::text,
                CASE
                    WHEN l1.plasmid_injections_text IS NOT NULL THEN 'plasmid: '::text || l1.plasmid_injections_text
                    ELSE NULL::text
                END,
                CASE
                    WHEN l1.rna_injections_text IS NOT NULL THEN 'RNA: '::text || l1.rna_injections_text
                    ELSE NULL::text
                END)) AS treatments_rollup
           FROM label l1
        )
 SELECT b.id,
    b.fish_code,
    b.name,
    b.nickname,
    l.genotype,
    l.genetic_background,
    l.stage,
    b.date_birth,
    CURRENT_DATE - b.date_birth AS age_days,
    b.created_at,
    COALESCE(l.created_by_enriched, b.created_by_raw) AS created_by,
    COALESCE(l.batch_label, l.seed_batch_id) AS batch_display,
    l.transgene_base_code,
    l.allele_code,
    r.treatments_rollup,
    COALESCE(t.n_living_tanks, 0) AS n_living_tanks
   FROM base b
     LEFT JOIN label l USING (fish_code)
     LEFT JOIN roll r USING (fish_code)
     LEFT JOIN tank_counts t ON t.fish_id = b.id;"
public,vw_plasmids_overview,""," SELECT p.id,
    p.code,
    p.name,
    p.nickname,
    p.fluors,
    p.resistance,
    p.supports_invitro_rna,
    p.created_by,
    p.notes,
    p.created_at,
    r.id AS rna_id,
    r.code AS rna_code,
    r.name AS rna_name,
    r.source_plasmid_id
   FROM plasmids p
     LEFT JOIN rnas r ON r.source_plasmid_id = p.id
  ORDER BY p.code;"

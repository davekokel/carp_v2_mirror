public|fish_csv|VIEW| SELECT fish_code,
    COALESCE(row_to_json(f.*)::jsonb ->> 'name'::text, ''::text) AS name,
    COALESCE(row_to_json(f.*)::jsonb ->> 'nickname'::text, ''::text) AS nickname,
    COALESCE(row_to_json(f.*)::jsonb ->> 'genetic_background'::text, ''::text) AS genetic_background,
    birthday,
    COALESCE(row_to_json(f.*)::jsonb ->> 'created_by'::text, ''::text) AS created_by,
    created_at
   FROM fish f;
public|mv_fish_search|MATERIALIZED VIEW| SELECT DISTINCT ON (fish_code) fish_code,
    txt,
    genotype,
    genetic_background,
    n_live
   FROM v_fish_search
  ORDER BY fish_code, n_live DESC, genotype, txt;
public|mv_overview_clutches_daily|MATERIALIZED VIEW| SELECT COALESCE(annotated_at::date, created_at::date) AS annot_day,
    count(*) AS annotations_count,
    max(COALESCE(annotated_at, created_at)) AS last_annotated
   FROM clutch_instances ci
  GROUP BY (COALESCE(annotated_at::date, created_at::date))
  ORDER BY (COALESCE(annotated_at::date, created_at::date)) DESC;
public|mv_overview_crosses_daily|MATERIALIZED VIEW| SELECT ci.cross_date AS run_day,
    count(*) AS runs_count,
    count(DISTINCT pc.clutch_id) AS clutches_count,
    max(ci.cross_date) AS last_run_date
   FROM cross_instances ci
     JOIN planned_crosses pc ON pc.cross_id = ci.cross_id
  GROUP BY ci.cross_date
  ORDER BY ci.cross_date DESC;
public|mv_overview_fish_daily|MATERIALIZED VIEW| SELECT created_at::date AS fish_day,
    count(*) AS fish_created,
    sum(
        CASE
            WHEN date_birth = created_at::date THEN 1
            ELSE 0
        END) AS births_logged,
    max(created_at) AS last_created
   FROM fish f
  GROUP BY (created_at::date)
  ORDER BY (created_at::date) DESC;
public|mv_overview_mounts_daily|MATERIALIZED VIEW| WITH base AS (
         SELECT m.mount_date AS mount_day,
            m.id AS mount_id,
            m.cross_instance_id,
            COALESCE(m.n_top, 0) AS n_top,
            COALESCE(m.n_bottom, 0) AS n_bottom,
            m.mounting_orientation AS orientation,
            m.time_mounted,
            m.created_at
           FROM mounts m
        ), ctx AS (
         SELECT b.mount_day,
            b.mount_id,
            b.cross_instance_id,
            b.n_top,
            b.n_bottom,
            b.orientation,
            b.time_mounted,
            b.created_at,
            cp.clutch_code
           FROM base b
             JOIN cross_instances ci ON ci.id = b.cross_instance_id
             JOIN planned_crosses pc ON pc.cross_id = ci.cross_id
             JOIN clutch_plans cp ON cp.id = pc.clutch_id
        ), hist AS (
         SELECT c.mount_day,
            c.orientation,
            count(*) AS cnt
           FROM ctx c
          GROUP BY c.mount_day, c.orientation
        )
 SELECT ctx.mount_day,
    count(*) AS mounts_count,
    sum(ctx.n_top + ctx.n_bottom) AS embryos_total_sum,
    count(DISTINCT ctx.cross_instance_id) AS runs_count,
    count(DISTINCT ctx.clutch_code) AS clutches_count,
    COALESCE(jsonb_object_agg(hist.orientation, hist.cnt) FILTER (WHERE hist.orientation IS NOT NULL), '{}'::jsonb) AS orientations_json,
    max(ctx.time_mounted) AS last_time_mounted
   FROM ctx
     LEFT JOIN hist ON hist.mount_day = ctx.mount_day
  GROUP BY ctx.mount_day
  ORDER BY ctx.mount_day DESC;
public|mv_overview_plasmids_daily|MATERIALIZED VIEW| SELECT created_at::date AS plasmid_day,
    count(*) AS plasmids_created,
    max(created_at) AS last_created
   FROM plasmids p
  GROUP BY (created_at::date)
  ORDER BY (created_at::date) DESC;
public|mv_overview_tanks_daily|MATERIALIZED VIEW| WITH base AS (
         SELECT c.created_at::date AS tank_day,
            c.id,
            c.status,
            c.activated_at,
            c.last_seen_at,
            c.created_at
           FROM containers c
          WHERE c.container_type = ANY (ARRAY['inventory_tank'::text, 'holding_tank'::text, 'nursery_tank'::text])
        )
 SELECT tank_day,
    count(*) AS tanks_created,
    sum(
        CASE
            WHEN status = 'active'::text THEN 1
            ELSE 0
        END) AS active_count,
    sum(
        CASE
            WHEN activated_at::date = tank_day THEN 1
            ELSE 0
        END) AS activated_count,
    max(last_seen_at) AS last_seen_at,
    max(created_at) AS last_created
   FROM base
  GROUP BY tank_day
  ORDER BY tank_day DESC;
public|seed_batches|VIEW| SELECT NULL::text AS seed_batch_id,
    NULL::text AS batch_label
  WHERE false;
public|v_clutch_counts|VIEW| WITH runs AS (
         SELECT cp_1.id AS clutch_id,
            cp_1.clutch_code,
            count(DISTINCT ci.id) AS runs_count,
            max(ci.cross_date) AS last_run_date,
            max(ci.clutch_birthday) AS last_birthday
           FROM clutch_plans cp_1
             LEFT JOIN planned_crosses pc ON pc.clutch_id = cp_1.id
             LEFT JOIN cross_instances ci ON ci.cross_id = pc.cross_id
          GROUP BY cp_1.id, cp_1.clutch_code
        ), ann AS (
         SELECT cp_1.id AS clutch_id,
            count(DISTINCT sel.id) AS annotations_count,
            max(sel.annotated_at) AS last_annotated_at
           FROM clutch_plans cp_1
             LEFT JOIN planned_crosses pc ON pc.clutch_id = cp_1.id
             LEFT JOIN cross_instances ci ON ci.cross_id = pc.cross_id
             LEFT JOIN clutch_instances sel ON sel.cross_instance_id = ci.id
          GROUP BY cp_1.id
        )
 SELECT cp.clutch_code,
    COALESCE(r.runs_count, 0::bigint) AS runs_count,
    COALESCE(a.annotations_count, 0::bigint) AS annotations_count,
    r.last_run_date,
    r.last_birthday,
    a.last_annotated_at
   FROM clutch_plans cp
     LEFT JOIN runs r ON r.clutch_id = cp.id
     LEFT JOIN ann a ON a.clutch_id = cp.id;
public|v_clutch_instances_annotations|VIEW| SELECT id,
    COALESCE(label, ''::text) AS label,
    COALESCE(phenotype, ''::text) AS phenotype,
    COALESCE(notes, ''::text) AS notes,
    COALESCE(red_selected, false) AS red_selected,
    COALESCE(red_intensity, ''::text) AS red_intensity,
    COALESCE(red_note, ''::text) AS red_note,
    COALESCE(green_selected, false) AS green_selected,
    COALESCE(green_intensity, ''::text) AS green_intensity,
    COALESCE(green_note, ''::text) AS green_note,
    COALESCE(annotated_by, ''::text) AS annotated_by,
    annotated_at,
    created_at
   FROM clutch_instances;
public|v_clutch_instances_overview|VIEW| SELECT ci.id AS cross_instance_id,
    ci.cross_run_code,
    ci.cross_date AS birthday,
    c.clutch_code,
    cl.id AS clutch_instance_id,
    cl.birthday AS clutch_birthday,
    cl.created_by AS clutch_created_by
   FROM cross_instances ci
     LEFT JOIN clutches c ON c.cross_instance_id = ci.id
     LEFT JOIN clutch_instances cl ON cl.cross_instance_id = ci.id;
public|v_containers_candidates|VIEW| SELECT id,
    container_type,
    label,
    status,
    created_by,
    created_at,
    status_changed_at,
    activated_at,
    deactivated_at,
    last_seen_at,
    note
   FROM containers c
  WHERE container_type = ANY (ARRAY['inventory_tank'::text, 'crossing_tank'::text, 'holding_tank'::text, 'nursery_tank'::text, 'petri_dish'::text]);
public|v_containers|VIEW| SELECT id,
    container_type,
    label,
    status,
    created_by,
    created_at,
    note,
    request_id,
    status_changed_at,
    activated_at,
    deactivated_at,
    last_seen_at,
    last_seen_source,
    tank_volume_l,
    tank_code
   FROM containers c
  WHERE status = ANY (ARRAY['active'::text, 'new_tank'::text]);
public|v_containers_overview|VIEW| SELECT id,
    container_type,
    label,
    tank_code,
    status,
    status_changed_at,
    created_at
   FROM containers c;
public|v_cross_concepts_overview|VIEW| SELECT cp.clutch_code AS conceptual_cross_code,
    cp.clutch_name AS name,
    cp.clutch_nickname AS nickname,
    hum.mom_tank_label AS mom_code,
    hum.dad_tank_label AS dad_code,
    hum.mom_tank_label AS mom_code_tank,
    hum.dad_tank_label AS dad_code_tank,
    cp.created_at
   FROM v_clutches_concept_overview cp
     LEFT JOIN v_clutches_overview_human hum ON hum.clutch_code = cp.clutch_code;
public|v_cross_plan_runs_enriched|VIEW| SELECT r.id,
    r.plan_id,
    r.seq,
    r.planned_date,
    r.status,
    r.note,
    r.created_by,
    r.created_at,
    p.plan_title,
    p.plan_nickname,
    p.mother_fish_id,
    p.father_fish_id,
    fm.fish_code AS mother_fish_code,
    ff.fish_code AS father_fish_code,
    ca.label AS tank_a_label,
    cb.label AS tank_b_label
   FROM cross_plan_runs r
     JOIN cross_plans p ON p.id = r.plan_id
     LEFT JOIN fish fm ON fm.id = p.mother_fish_id
     LEFT JOIN fish ff ON ff.id = p.father_fish_id
     LEFT JOIN containers ca ON ca.id = r.tank_a_id
     LEFT JOIN containers cb ON cb.id = r.tank_b_id;
public|v_cross_plans_enriched|VIEW| SELECT p.id,
    p.plan_date,
    p.status,
    p.created_by,
    p.note,
    p.created_at,
    p.mother_fish_id,
    fm.fish_code AS mother_fish_code,
    p.father_fish_id,
    ff.fish_code AS father_fish_code,
    p.tank_a_id,
    ca.label AS tank_a_label,
    p.tank_b_id,
    cb.label AS tank_b_label,
    COALESCE(( SELECT string_agg(format('%s[%s]%s'::text, g.transgene_base_code, g.allele_number, COALESCE(' '::text || g.zygosity_planned, ''::text)), ', '::text ORDER BY g.transgene_base_code, g.allele_number) AS string_agg
           FROM cross_plan_genotype_alleles g
          WHERE g.plan_id = p.id), ''::text) AS genotype_plan,
    COALESCE(( SELECT string_agg(TRIM(BOTH ' '::text FROM concat(t.treatment_name,
                CASE
                    WHEN t.amount IS NOT NULL THEN ' '::text || t.amount::text
                    ELSE ''::text
                END,
                CASE
                    WHEN t.units IS NOT NULL THEN ' '::text || t.units
                    ELSE ''::text
                END,
                CASE
                    WHEN t.timing_note IS NOT NULL THEN (' ['::text || t.timing_note) || ']'::text
                    ELSE ''::text
                END)), ', '::text ORDER BY t.treatment_name) AS string_agg
           FROM cross_plan_treatments t
          WHERE t.plan_id = p.id), ''::text) AS treatments_plan
   FROM cross_plans p
     LEFT JOIN fish fm ON fm.id = p.mother_fish_id
     LEFT JOIN fish ff ON ff.id = p.father_fish_id
     LEFT JOIN containers ca ON ca.id = p.tank_a_id
     LEFT JOIN containers cb ON cb.id = p.tank_b_id;
public|v_crosses_status|VIEW| SELECT id,
    mother_code,
    father_code,
    planned_for,
    created_by,
    created_at,
        CASE
            WHEN (EXISTS ( SELECT 1
               FROM clutches x
              WHERE x.cross_id = c.id)) THEN 'realized'::text
            ELSE 'planned'::text
        END AS status
   FROM crosses c;
public|v_fish_label_fields|VIEW| SELECT fish_code,
    nickname,
    name,
    NULL::text AS base_code,
    NULL::text AS tg_nick,
    line_building_stage AS stage,
    date_birth AS dob,
    NULLIF(array_to_string(ARRAY( SELECT (fa2.transgene_base_code || '^'::text) || fa2.allele_number::text
           FROM fish_transgene_alleles fa2
          WHERE fa2.fish_id = f.id
          ORDER BY fa2.transgene_base_code, fa2.allele_number), '; '::text), ''::text) AS genotype,
    genetic_background
   FROM fish f;
public|v_fish_live_counts|VIEW| SELECT f.fish_code,
    count(*)::integer AS n_live
   FROM fish f
     JOIN fish_tank_memberships m ON m.fish_id = f.id AND m.left_at IS NULL
     JOIN containers c ON c.id = m.container_id
  WHERE (c.status = ANY (ARRAY['active'::text, 'new_tank'::text])) AND (c.container_type = ANY (ARRAY['inventory_tank'::text, 'holding_tank'::text, 'nursery_tank'::text]))
  GROUP BY f.fish_code;
public|v_fish_living_tank_counts|VIEW| SELECT m.fish_id,
    count(*)::integer AS n_living_tanks
   FROM fish_tank_memberships m
     JOIN containers c ON c.id = m.container_id
  WHERE m.left_at IS NULL AND (c.status = ANY (ARRAY['active'::text, 'new_tank'::text]))
  GROUP BY m.fish_id;
public|v_fish_overview|VIEW| SELECT fish_code,
    name,
    nickname,
    line_building_stage,
    date_birth,
    genetic_background,
    created_at,
    NULLIF(array_to_string(ARRAY( SELECT (fa2.transgene_base_code || '^'::text) || fa2.allele_number::text
           FROM fish_transgene_alleles fa2
          WHERE fa2.fish_id = f.id
          ORDER BY fa2.transgene_base_code, fa2.allele_number), '; '::text), ''::text) AS genotype_text,
    date_part('day'::text, now() - date_birth::timestamp with time zone)::integer AS age_days
   FROM fish f
  ORDER BY created_at DESC;
public|v_fish_overview_all|VIEW| WITH clean AS (
         SELECT c.fish_code,
            COALESCE(c.genotype, ''::text) AS genotype,
            COALESCE(c.genetic_background, ''::text) AS genetic_background,
            c.birthday,
            COALESCE(c.transgene_base, ''::text) AS transgene_base,
            COALESCE(c.allele_number, 0) AS allele_number,
            COALESCE(c.allele_name, ''::text) AS allele_name,
            COALESCE(c.allele_nickname, ''::text) AS allele_nickname,
            COALESCE(c.transgene_pretty_nickname, ''::text) AS transgene_pretty_nickname,
            COALESCE(c.transgene_pretty_name, ''::text) AS transgene_pretty_name,
            COALESCE(c.genotype_rollup_clean, ''::text) AS genotype_rollup_clean,
            c.created_at,
            COALESCE(c.created_by, ''::text) AS created_by
           FROM v_fish_standard_clean c
        ), fish_meta AS (
         SELECT f.fish_code,
            COALESCE(lv.name, f.name, ''::text) AS name,
            COALESCE(lv.nickname, f.nickname, ''::text) AS nickname,
            COALESCE(row_to_json(f.*)::jsonb ->> 'line_building_stage'::text, row_to_json(f.*)::jsonb ->> 'line_building_stage_print'::text, ''::text) AS line_building_stage,
            COALESCE(row_to_json(f.*)::jsonb ->> 'description'::text, ''::text) AS description,
            COALESCE(row_to_json(f.*)::jsonb ->> 'notes'::text, ''::text) AS notes,
            COALESCE(f.created_by, ''::text) AS created_by_fish,
            f.created_at AS created_at_fish
           FROM fish f
             LEFT JOIN v_fish_label_fields lv ON lv.fish_code = f.fish_code
        ), counts AS (
         SELECT v_fish_live_counts.fish_code,
            v_fish_live_counts.n_live
           FROM v_fish_live_counts
        ), zyg AS (
         SELECT f.fish_code,
            fta.transgene_base_code AS transgene_base,
            COALESCE(fta.zygosity, ''::text) AS zygosity
           FROM fish_transgene_alleles fta
             JOIN fish f ON f.id = fta.fish_id
        )
 SELECT COALESCE(cl.fish_code, fm.fish_code) AS fish_code,
    COALESCE(fm.name, ''::text) AS name,
    COALESCE(fm.nickname, ''::text) AS nickname,
    COALESCE(cl.genetic_background, ''::text) AS genetic_background,
    COALESCE(fm.line_building_stage, ''::text) AS line_building_stage,
    COALESCE(fm.description, ''::text) AS description,
    COALESCE(fm.notes, ''::text) AS notes,
    cl.birthday,
    COALESCE(cl.created_by, fm.created_by_fish, ''::text) AS created_by,
    COALESCE(cl.created_at, fm.created_at_fish) AS created_at,
    COALESCE(cl.transgene_base, ''::text) AS transgene_base,
    COALESCE(cl.allele_number, 0) AS allele_number,
    COALESCE(cl.allele_name, ''::text) AS allele_name,
    COALESCE(cl.allele_nickname, ''::text) AS allele_nickname,
    COALESCE(z.zygosity, ''::text) AS zygosity,
    COALESCE(cl.transgene_pretty_nickname, ''::text) AS transgene_pretty_nickname,
    COALESCE(cl.transgene_pretty_name, ''::text) AS transgene_pretty_name,
    COALESCE(cl.genotype, ''::text) AS genotype,
    COALESCE(cl.genotype_rollup_clean, ''::text) AS genotype_rollup_clean,
    COALESCE(cl.transgene_base, ''::text) AS transgene_base_code,
    COALESCE(cnt.n_live, 0) AS n_living_tanks
   FROM clean cl
     FULL JOIN fish_meta fm ON fm.fish_code = cl.fish_code
     LEFT JOIN counts cnt ON cnt.fish_code = COALESCE(cl.fish_code, fm.fish_code)
     LEFT JOIN zyg z ON z.fish_code = COALESCE(cl.fish_code, fm.fish_code) AND z.transgene_base = cl.transgene_base
  ORDER BY (COALESCE(cl.fish_code, fm.fish_code));
public|v_fish_overview_canonical|VIEW| SELECT fish_code,
    name,
    nickname,
    line_building_stage,
    date_birth,
    genetic_background,
    created_at,
    NULLIF(array_to_string(ARRAY( SELECT (fa2.transgene_base_code || '^'::text) || fa2.allele_number::text
           FROM fish_transgene_alleles fa2
          WHERE fa2.fish_id = f.id
          ORDER BY fa2.transgene_base_code, fa2.allele_number), '; '::text), ''::text) AS genotype_text,
    date_part('day'::text, now() - date_birth::timestamp with time zone)::integer AS age_days,
    ( SELECT m.seed_batch_id
           FROM fish_seed_batches_map m
          WHERE m.fish_id = f.id
          ORDER BY m.logged_at DESC
         LIMIT 1) AS seed_batch_id
   FROM fish f
  ORDER BY created_at DESC;
public|v_fish_overview_human|VIEW| WITH open_memberships AS (
         SELECT m.fish_id,
            c.id AS container_id,
            c.tank_code,
            c.label,
            c.status,
            c.created_at
           FROM fish_tank_memberships m
             JOIN containers c ON c.id = m.container_id
          WHERE COALESCE(NULLIF(to_jsonb(m.*) ->> 'left_at'::text, ''::text)::timestamp with time zone, NULLIF(to_jsonb(m.*) ->> 'ended_at'::text, ''::text)::timestamp with time zone) IS NULL AND ((c.status = ANY (ARRAY['active'::text, 'new_tank'::text])) OR c.status IS NULL)
        ), alleles AS (
         SELECT fta.fish_id,
            fta.transgene_base_code AS base_code,
            fta.allele_number,
            COALESCE(ta.allele_nickname, fta.allele_number::text) AS allele_nickname,
            COALESCE(NULLIF(to_jsonb(tg.*) ->> 'transgene_name'::text, ''::text), NULLIF(to_jsonb(tg.*) ->> 'name'::text, ''::text), NULLIF(to_jsonb(tg.*) ->> 'label'::text, ''::text), fta.transgene_base_code) AS transgene_name,
            fta.zygosity
           FROM fish_transgene_alleles fta
             LEFT JOIN transgene_alleles ta ON ta.transgene_base_code = fta.transgene_base_code AND ta.allele_number = fta.allele_number
             LEFT JOIN transgenes tg ON tg.transgene_base_code = fta.transgene_base_code
        ), genotype AS (
         SELECT a.fish_id,
            string_agg(TRIM(BOTH ' '::text FROM (((a.transgene_name || '('::text) || a.allele_number::text) || COALESCE(' '::text || a.zygosity, ''::text)) || ')'::text), ' + '::text ORDER BY a.transgene_name, a.allele_number) AS genotype_rollup,
            min(a.transgene_name) AS transgene_primary,
            min(a.allele_number) AS allele_number_primary,
            min(((a.transgene_name || '('::text) || a.allele_number::text) || ')'::text) AS allele_code_primary
           FROM alleles a
          GROUP BY a.fish_id
        ), current_tank AS (
         SELECT DISTINCT ON (o.fish_id) o.fish_id,
            o.tank_code,
            o.label AS tank_label,
            o.status AS tank_status,
            o.created_at AS tank_created_at
           FROM open_memberships o
          ORDER BY o.fish_id, o.created_at DESC NULLS LAST
        )
 SELECT f.id AS fish_id,
    f.fish_code,
    f.name AS fish_name,
    f.nickname AS fish_nickname,
    f.genetic_background,
    g.allele_number_primary AS allele_number,
    g.allele_code_primary AS allele_code,
    g.transgene_primary AS transgene,
    g.genotype_rollup,
    ct.tank_code,
    ct.tank_label,
    ct.tank_status,
    NULLIF(to_jsonb(f.*) ->> 'stage'::text, ''::text) AS stage,
    f.date_birth,
    f.created_at,
    f.created_by
   FROM fish f
     LEFT JOIN genotype g ON g.fish_id = f.id
     LEFT JOIN current_tank ct ON ct.fish_id = f.id
  ORDER BY f.created_at DESC NULLS LAST;
public|v_fish_search|VIEW| SELECT f.fish_code,
    lower((COALESCE(sc.genotype, ''::text) || ' '::text) || COALESCE(sc.genetic_background, ''::text)) AS txt,
    COALESCE(sc.genotype, ''::text) AS genotype,
    COALESCE(sc.genetic_background, ''::text) AS genetic_background,
    COALESCE(l.n_live, 0) AS n_live
   FROM fish f
     LEFT JOIN v_fish_standard_clean sc ON sc.fish_code = f.fish_code
     LEFT JOIN v_fish_live_counts l ON l.fish_code = f.fish_code;
public|v_fish_standard_clean|VIEW| WITH vs AS (
         SELECT v_fish_standard.id,
            v_fish_standard.fish_code,
            v_fish_standard.name,
            v_fish_standard.nickname,
            v_fish_standard.genotype,
            v_fish_standard.genetic_background,
            v_fish_standard.stage,
            v_fish_standard.date_birth,
            v_fish_standard.age_days,
            v_fish_standard.created_at,
            v_fish_standard.created_by,
            v_fish_standard.batch_display,
            v_fish_standard.transgene_base_code,
            v_fish_standard.allele_code,
            v_fish_standard.treatments_rollup,
            v_fish_standard.n_living_tanks
           FROM v_fish_standard
        ), src AS (
         SELECT f.fish_code,
            COALESCE(vs.genotype, ''::text) AS genotype,
            COALESCE(vs.genetic_background, ''::text) AS genetic_background,
            vs.date_birth AS birthday,
            COALESCE(to_jsonb(vs.*) ->> 'transgene_base_code'::text, to_jsonb(vs.*) ->> 'transgene'::text, to_jsonb(vs.*) ->> 'transgene_print'::text, ''::text) AS transgene_base,
            f.created_at,
            COALESCE(f.created_by, ''::text) AS created_by,
            COALESCE(f.name, ''::text) AS fish_name_base,
            COALESCE(f.nickname, ''::text) AS fish_nickname_base
           FROM fish f
             LEFT JOIN vs ON vs.fish_code = f.fish_code
        ), joined AS (
         SELECT s.fish_code,
            s.genotype,
            s.genetic_background,
            s.birthday,
            s.transgene_base,
            s.created_at,
            s.created_by,
            s.fish_name_base,
            s.fish_nickname_base,
            l.name AS name_labeled,
            l.nickname AS nickname_labeled
           FROM src s
             LEFT JOIN v_fish_label_fields l ON l.fish_code = s.fish_code
        ), fmt AS (
         SELECT joined.fish_code,
            COALESCE(joined.name_labeled, joined.fish_name_base) AS name,
            COALESCE(joined.nickname_labeled, joined.fish_nickname_base) AS nickname,
            joined.genotype,
            joined.genetic_background,
            joined.birthday,
            joined.transgene_base,
            joined.created_at,
            joined.created_by
           FROM joined
        ), roll AS (
         SELECT f.fish_code,
            f.name,
            f.nickname,
            f.genotype,
            f.genetic_background,
            f.birthday,
            f.transgene_base,
            f.created_at,
            f.created_by,
            ta.allele_nickname,
            ta.allele_number,
            ta.allele_name,
            TRIM(BOTH FROM regexp_replace(concat_ws(' '::text,
                CASE
                    WHEN NULLIF(f.transgene_base, ''::text) IS NOT NULL THEN f.transgene_base ||
                    CASE
                        WHEN ta.allele_number IS NOT NULL THEN ('('::text || ta.allele_number::text) || ')'::text
                        ELSE ''::text
                    END
                    ELSE NULL::text
                END), '\s+'::text, ' '::text, 'g'::text)) AS genotype_rollup_clean
           FROM fmt f
             LEFT JOIN transgene_alleles ta ON ta.transgene_base_code = f.transgene_base
        )
 SELECT fish_code,
    name,
    nickname,
    genotype,
    genetic_background,
    birthday,
    transgene_base,
    allele_number,
    allele_name,
    allele_nickname,
        CASE
            WHEN NULLIF(transgene_base, ''::text) IS NOT NULL AND NULLIF(COALESCE(allele_nickname, ''::text), ''::text) IS NOT NULL THEN (('Tg('::text || transgene_base) || ')'::text) || allele_nickname
            ELSE ''::text
        END AS transgene_pretty_nickname,
        CASE
            WHEN NULLIF(transgene_base, ''::text) IS NOT NULL AND NULLIF(COALESCE(allele_name, ''::text), ''::text) IS NOT NULL THEN (('Tg('::text || transgene_base) || ')'::text) || allele_name
            ELSE ''::text
        END AS transgene_pretty_name,
    genotype_rollup_clean,
    created_at,
    created_by
   FROM roll;
public|v_labels_recent|VIEW| SELECT id,
    entity_type,
    entity_id,
    template,
    media,
    status,
    requested_by,
    requested_at,
    started_at,
    finished_at,
    num_labels,
    file_bytes IS NOT NULL OR file_url IS NOT NULL AS has_file
   FROM label_jobs j
  ORDER BY requested_at DESC;
public|v_overview_crosses|VIEW| WITH latest_planned AS (
         SELECT DISTINCT ON (cp_1.id) cp_1.id AS clutch_id,
            cp_1.clutch_code,
            cp_1.status,
            pc.id AS planned_id,
            pc.created_at AS planned_created_at,
            pc.cross_id,
            pc.mother_tank_id,
            pc.father_tank_id,
            cp_1.created_at
           FROM clutch_plans cp_1
             LEFT JOIN planned_crosses pc ON pc.clutch_id = cp_1.id
          ORDER BY cp_1.id, pc.created_at DESC NULLS LAST
        ), counts AS (
         SELECT planned_crosses.clutch_id,
            count(*)::integer AS planned_count
           FROM planned_crosses
          GROUP BY planned_crosses.clutch_id
        )
 SELECT lp.clutch_code,
    x.cross_name_code AS name,
    x.cross_name_genotype AS nickname,
    cp.status::text AS status,
    COALESCE(ct.planned_count, 0) AS planned_count,
    x.mother_code AS mom_code,
    x.father_code AS dad_code,
    cm.tank_code AS mom_code_tank,
    cf.tank_code AS dad_code_tank,
    cp.created_at,
    cm.tank_code IS NOT NULL AND cf.tank_code IS NOT NULL AS runnable
   FROM clutch_plans cp
     LEFT JOIN latest_planned lp ON lp.clutch_id = cp.id
     LEFT JOIN counts ct ON ct.clutch_id = cp.id
     LEFT JOIN crosses x ON x.id = lp.cross_id
     LEFT JOIN containers cm ON cm.id = lp.mother_tank_id
     LEFT JOIN containers cf ON cf.id = lp.father_tank_id;
public|v_bruker_mounts_enriched|VIEW| SELECT mount_code,
    COALESCE(selection_id::text, id::text) AS selection_id,
    mount_date,
    NULL::time without time zone AS mount_time,
    NULL::integer AS n_top,
    NULL::integer AS n_bottom,
    NULL::text AS orientation,
    created_at,
    created_by
   FROM bruker_mounts bm;
public|v_clutches_concept_overview|VIEW| WITH base AS (
         SELECT cp.id AS clutch_plan_id,
            pc.id AS planned_cross_id,
            cp.clutch_code,
            cp.planned_name AS clutch_name,
            cp.planned_nickname AS clutch_nickname,
            pc.cross_date AS date_planned,
            COALESCE(cp.note, pc.note) AS note,
            cp.created_by,
            cp.created_at
           FROM clutch_plans cp
             LEFT JOIN planned_crosses pc ON pc.clutch_id = cp.id
        ), inst AS (
         SELECT c.planned_cross_id,
            count(*)::integer AS n_instances,
            max(c.date_birth) AS latest_date_birth,
            count(c.cross_id)::integer AS n_crosses
           FROM clutches c
          GROUP BY c.planned_cross_id
        ), cont AS (
         SELECT c.planned_cross_id,
            count(cc.*)::integer AS n_containers
           FROM clutches c
             JOIN clutch_containers cc ON cc.clutch_id = c.id
          GROUP BY c.planned_cross_id
        )
 SELECT b.clutch_plan_id,
    b.planned_cross_id,
    b.clutch_code,
    b.clutch_name,
    b.clutch_nickname,
    b.date_planned,
    b.created_by,
    b.created_at,
    b.note,
    COALESCE(i.n_instances, 0) AS n_instances,
    COALESCE(COALESCE(i.n_crosses, 0), 0) AS n_crosses,
    COALESCE(ct.n_containers, 0) AS n_containers,
    i.latest_date_birth
   FROM base b
     LEFT JOIN inst i ON i.planned_cross_id = b.planned_cross_id
     LEFT JOIN cont ct ON ct.planned_cross_id = b.planned_cross_id
  ORDER BY (COALESCE(b.date_planned::timestamp without time zone::timestamp with time zone, b.created_at)) DESC NULLS LAST;
public|v_clutches_overview_human|VIEW| WITH base AS (
         SELECT c.id AS clutch_id,
            c.date_birth,
            c.created_by,
            c.created_at,
            c.note,
            c.batch_label,
            c.seed_batch_id,
            c.planned_cross_id,
            cp.clutch_code,
            cp.planned_name AS clutch_name,
            COALESCE(mt.label, mt.tank_code) AS mom_tank_label,
            COALESCE(ft.label, ft.tank_code) AS dad_tank_label,
            c.cross_id
           FROM clutches c
             LEFT JOIN planned_crosses pc ON pc.id = c.planned_cross_id
             LEFT JOIN clutch_plans cp ON cp.id = pc.clutch_id
             LEFT JOIN containers mt ON mt.id = pc.mother_tank_id
             LEFT JOIN containers ft ON ft.id = pc.father_tank_id
        ), instances AS (
         SELECT cc.clutch_id,
            count(*)::integer AS n_instances
           FROM clutch_containers cc
          GROUP BY cc.clutch_id
        ), crosses_via_clutches AS (
         SELECT b1.clutch_id,
            count(x.id)::integer AS n_crosses
           FROM base b1
             LEFT JOIN crosses x ON x.id = b1.cross_id
          GROUP BY b1.clutch_id
        )
 SELECT b.clutch_id,
    b.date_birth,
    b.created_by,
    b.created_at,
    b.note,
    b.batch_label,
    b.seed_batch_id,
    b.clutch_code,
    b.clutch_name,
    NULL::text AS clutch_nickname,
    b.mom_tank_label,
    b.dad_tank_label,
    COALESCE(i.n_instances, 0) AS n_instances,
    COALESCE(cx.n_crosses, 0) AS n_crosses
   FROM base b
     LEFT JOIN instances i ON i.clutch_id = b.clutch_id
     LEFT JOIN crosses_via_clutches cx ON cx.clutch_id = b.clutch_id
  ORDER BY (COALESCE(b.date_birth::timestamp with time zone, b.created_at)) DESC NULLS LAST;
public|v_cross_runs|VIEW| WITH cl AS (
         SELECT clutches.cross_instance_id,
            count(*)::integer AS n_clutches
           FROM clutches
          GROUP BY clutches.cross_instance_id
        ), cnt AS (
         SELECT c.cross_instance_id,
            count(cc.*)::integer AS n_containers
           FROM clutches c
             JOIN clutch_containers cc ON cc.clutch_id = c.id
          GROUP BY c.cross_instance_id
        )
 SELECT ci.id AS cross_instance_id,
    ci.cross_run_code,
    ci.cross_date,
    x.id AS cross_id,
    COALESCE(x.cross_code, x.id::text) AS cross_code,
    x.mother_code AS mom_code,
    x.father_code AS dad_code,
    cm.label AS mother_tank_label,
    cf.label AS father_tank_label,
    ci.note AS run_note,
    ci.created_by AS run_created_by,
    ci.created_at AS run_created_at,
    COALESCE(cl.n_clutches, 0) AS n_clutches,
    COALESCE(cnt.n_containers, 0) AS n_containers
   FROM cross_instances ci
     JOIN crosses x ON x.id = ci.cross_id
     LEFT JOIN containers cm ON cm.id = ci.mother_tank_id
     LEFT JOIN containers cf ON cf.id = ci.father_tank_id
     LEFT JOIN cl ON cl.cross_instance_id = ci.id
     LEFT JOIN cnt ON cnt.cross_instance_id = ci.id
  ORDER BY ci.cross_date DESC, ci.created_at DESC;
public|v_crosses_concept|VIEW| WITH runs AS (
         SELECT cross_instances.cross_id,
            count(*)::integer AS n_runs,
            max(cross_instances.cross_date) AS latest_cross_date
           FROM cross_instances
          GROUP BY cross_instances.cross_id
        ), cl AS (
         SELECT clutches.cross_id,
            count(*)::integer AS n_clutches
           FROM clutches
          GROUP BY clutches.cross_id
        ), cnt AS (
         SELECT c.cross_id,
            count(cc.*)::integer AS n_containers
           FROM clutches c
             JOIN clutch_containers cc ON cc.clutch_id = c.id
          GROUP BY c.cross_id
        )
 SELECT x.id AS cross_id,
    COALESCE(x.cross_code, x.id::text) AS cross_code,
    x.mother_code AS mom_code,
    x.father_code AS dad_code,
    x.created_by,
    x.created_at,
    COALESCE(runs.n_runs, 0) AS n_runs,
    runs.latest_cross_date,
    COALESCE(cl.n_clutches, 0) AS n_clutches,
    COALESCE(cnt.n_containers, 0) AS n_containers
   FROM crosses x
     LEFT JOIN runs ON runs.cross_id = x.id
     LEFT JOIN cl ON cl.cross_id = x.id
     LEFT JOIN cnt ON cnt.cross_id = x.id
  ORDER BY x.created_at DESC;
public|v_fish_overview_with_label|VIEW| WITH base AS (
         SELECT f.fish_code,
            f.name,
            f.nickname,
            f.line_building_stage,
            f.date_birth,
            f.genetic_background,
            f.created_by,
            f.created_at
           FROM fish f
        ), allele AS (
         SELECT DISTINCT ON (f2.fish_code) f2.fish_code,
            l.transgene_base_code,
            l.allele_number,
            ta.allele_nickname
           FROM fish_transgene_alleles l
             JOIN fish f2 ON f2.id = l.fish_id
             LEFT JOIN transgene_alleles ta ON ta.transgene_base_code = l.transgene_base_code AND ta.allele_number = l.allele_number
          ORDER BY f2.fish_code, l.transgene_base_code, l.allele_number
        ), batch AS (
         SELECT DISTINCT ON (f3.fish_code) f3.fish_code,
            m.seed_batch_id
           FROM fish_seed_batches_map m
             JOIN fish f3 ON f3.id = m.fish_id
          ORDER BY f3.fish_code, m.logged_at DESC NULLS LAST, m.created_at DESC NULLS LAST
        )
 SELECT b.fish_code,
    b.name,
    b.nickname,
    b.line_building_stage,
    b.date_birth,
    b.genetic_background,
    b.created_by,
    b.created_at,
    a.transgene_base_code AS transgene_base_code_filled,
    a.allele_number::text AS allele_code_filled,
    a.allele_nickname AS allele_name_filled,
    batch.seed_batch_id,
    batch.seed_batch_id AS batch_label,
    COALESCE(b.nickname, ''::text) AS nickname_print,
    COALESCE(b.genetic_background, ''::text) AS genetic_background_print,
    COALESCE(b.line_building_stage, ''::text) AS line_building_stage_print,
    COALESCE(to_char(b.date_birth::timestamp with time zone, 'YYYY-MM-DD'::text), ''::text) AS date_birth_print,
        CASE
            WHEN a.transgene_base_code IS NULL THEN ''::text
            WHEN a.allele_number IS NOT NULL THEN (a.transgene_base_code || '-'::text) || a.allele_number::text
            WHEN a.allele_nickname IS NOT NULL THEN (a.transgene_base_code || ' '::text) || a.allele_nickname
            ELSE a.transgene_base_code
        END AS genotype_print,
        CASE
            WHEN b.date_birth IS NOT NULL THEN CURRENT_DATE - b.date_birth
            ELSE NULL::integer
        END AS age_days,
        CASE
            WHEN b.date_birth IS NOT NULL THEN (CURRENT_DATE - b.date_birth) / 7
            ELSE NULL::integer
        END AS age_weeks,
    COALESCE(b.created_by, ''::text) AS created_by_enriched,
    NULL::text AS plasmid_injections_text,
    NULL::text AS rna_injections_text
   FROM base b
     LEFT JOIN allele a USING (fish_code)
     LEFT JOIN batch USING (fish_code)
  ORDER BY b.fish_code;
public|v_fish_standard|VIEW| WITH base AS (
         SELECT f.id,
            f.fish_code,
            COALESCE(f.name, ''::text) AS name,
            COALESCE(f.nickname, ''::text) AS nickname,
            f.date_birth,
            f.created_at,
            COALESCE(f.created_by, ''::text) AS created_by_raw
           FROM fish f
        ), label AS (
         SELECT v.fish_code,
            v.genotype_print AS genotype,
            COALESCE(v.genetic_background_print, v.genetic_background) AS genetic_background,
            COALESCE(v.line_building_stage, v.line_building_stage_print) AS stage,
            v.batch_label,
            v.seed_batch_id,
            v.transgene_base_code_filled AS transgene_base_code,
            v.allele_code_filled AS allele_code,
            v.created_by_enriched,
            NULLIF(v.plasmid_injections_text, ''::text) AS plasmid_injections_text,
            NULLIF(v.rna_injections_text, ''::text) AS rna_injections_text
           FROM v_fish_overview_with_label v
        ), tank_counts AS (
         SELECT m.fish_id,
            count(*)::integer AS n_living_tanks
           FROM fish_tank_memberships m
             JOIN containers c ON c.id = m.container_id
          WHERE m.left_at IS NULL AND c.container_type = 'inventory_tank'::text AND c.deactivated_at IS NULL AND (COALESCE(c.status, ''::text) = ANY (ARRAY['active'::text, 'planned'::text]))
          GROUP BY m.fish_id
        ), roll AS (
         SELECT l1.fish_code,
            TRIM(BOTH '; '::text FROM concat_ws('; '::text,
                CASE
                    WHEN l1.plasmid_injections_text IS NOT NULL THEN 'plasmid: '::text || l1.plasmid_injections_text
                    ELSE NULL::text
                END,
                CASE
                    WHEN l1.rna_injections_text IS NOT NULL THEN 'RNA: '::text || l1.rna_injections_text
                    ELSE NULL::text
                END)) AS treatments_rollup
           FROM label l1
        )
 SELECT b.id,
    b.fish_code,
    b.name,
    b.nickname,
    l.genotype,
    l.genetic_background,
    l.stage,
    b.date_birth,
    CURRENT_DATE - b.date_birth AS age_days,
    b.created_at,
    COALESCE(l.created_by_enriched, b.created_by_raw) AS created_by,
    COALESCE(l.batch_label, l.seed_batch_id) AS batch_display,
    l.transgene_base_code,
    l.allele_code,
    r.treatments_rollup,
    COALESCE(t.n_living_tanks, 0) AS n_living_tanks
   FROM base b
     LEFT JOIN label l USING (fish_code)
     LEFT JOIN roll r USING (fish_code)
     LEFT JOIN tank_counts t ON t.fish_id = b.id;
public|v_label_rows|VIEW| WITH base AS (
         SELECT f.id,
            f.fish_code,
            f.name,
            f.nickname,
            f.line_building_stage,
            f.date_birth,
            f.genetic_background,
            f.created_at
           FROM fish f
        ), allele AS (
         SELECT DISTINCT ON (f2.fish_code) f2.fish_code,
            l.transgene_base_code,
            l.allele_number,
            ta.allele_nickname
           FROM fish_transgene_alleles l
             JOIN fish f2 ON f2.id = l.fish_id
             LEFT JOIN transgene_alleles ta ON ta.transgene_base_code = l.transgene_base_code AND ta.allele_number = l.allele_number
          ORDER BY f2.fish_code, l.transgene_base_code, l.allele_number
        ), batch AS (
         SELECT DISTINCT ON (f3.fish_code) f3.fish_code,
            m.seed_batch_id
           FROM fish_seed_batches_map m
             JOIN fish f3 ON f3.id = m.fish_id
          ORDER BY f3.fish_code, m.logged_at DESC NULLS LAST, m.created_at DESC NULLS LAST
        )
 SELECT b.id,
    b.created_at,
    b.fish_code,
    b.name,
    a.transgene_base_code AS transgene_base_code_filled,
    a.allele_number::text AS allele_code_filled,
    a.allele_nickname AS allele_name_filled,
    batch.seed_batch_id AS batch_label,
    COALESCE(b.nickname, ''::text) AS nickname_print,
    COALESCE(b.genetic_background, ''::text) AS genetic_background_print,
    COALESCE(b.line_building_stage, ''::text) AS line_building_stage_print,
    COALESCE(to_char(b.date_birth::timestamp with time zone, 'YYYY-MM-DD'::text), ''::text) AS date_birth_print,
        CASE
            WHEN a.transgene_base_code IS NULL THEN ''::text
            WHEN a.allele_number IS NOT NULL THEN (a.transgene_base_code || '-'::text) || a.allele_number::text
            WHEN a.allele_nickname IS NOT NULL THEN (a.transgene_base_code || ' '::text) || a.allele_nickname
            ELSE a.transgene_base_code
        END AS genotype_print
   FROM base b
     LEFT JOIN allele a USING (fish_code)
     LEFT JOIN batch USING (fish_code)
  ORDER BY b.fish_code;
public|v_planned_clutches_overview|VIEW| WITH x AS (
         SELECT cp.id AS clutch_plan_id,
            pc.id AS planned_cross_id,
            cp.clutch_code,
            cp.planned_name AS clutch_name,
            cp.planned_nickname AS clutch_nickname,
            pc.cross_date,
            cp.created_by,
            cp.created_at,
            COALESCE(cp.note, pc.note) AS note
           FROM clutch_plans cp
             LEFT JOIN planned_crosses pc ON pc.clutch_id = cp.id
        ), tx AS (
         SELECT t.clutch_id AS clutch_plan_id,
            count(*)::integer AS n_treatments
           FROM clutch_plan_treatments t
          GROUP BY t.clutch_id
        )
 SELECT x.clutch_plan_id,
    x.planned_cross_id,
    x.clutch_code,
    x.clutch_name,
    x.clutch_nickname,
    x.cross_date,
    x.created_by,
    x.created_at,
    x.note,
    COALESCE(tx.n_treatments, 0) AS n_treatments
   FROM x
     LEFT JOIN tx ON tx.clutch_plan_id = x.clutch_plan_id
  ORDER BY (COALESCE(x.cross_date::timestamp with time zone, x.created_at)) DESC NULLS LAST;
public|v_plasmids|VIEW| SELECT p.id,
    p.code,
    p.name,
    p.nickname,
    p.fluors,
    p.resistance,
    p.supports_invitro_rna,
    p.created_by,
    p.notes,
    p.created_at,
    r.id AS rna_id,
    r.code AS rna_code,
    r.name AS rna_name,
    r.source_plasmid_id
   FROM plasmids p
     LEFT JOIN rnas r ON r.source_plasmid_id = p.id
  ORDER BY p.code;
